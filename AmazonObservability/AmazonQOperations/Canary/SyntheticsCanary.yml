AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for CloudWatch Synthetics Canary with increased load'

Parameters:
  ApiEndpoint:
    Type: String
    Description: 'The API endpoint URL to test'
  
  CanaryRuntimeVersion:
    Type: String
    Description: 'Runtime version for the canary. See here for more information https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Library.html'
    Default: 'syn-nodejs-puppeteer-9.1'

  CanaryFrequency:
    Type: String
    Description: 'Frequency of canary runs (in minutes)'
    Default: '5'
    AllowedValues: ['1', '5', '10', '15', '30', '60']

  RequestsPerRun:
    Type: Number
    Description: 'Number of requests to send per canary run'
    Default: 10
    MinValue: 1
    MaxValue: 100

Resources:
  CanaryArtifactsBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Join 
        - '-'
        - - 'canary-artifacts'
          - !Select [2, !Split ["/", !Ref AWS::StackId]]
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldArtifacts
            Status: Enabled
            ExpirationInDays: 30
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
      PublicAccessBlockConfiguration:
        IgnorePublicAcls: true
      ObjectLockEnabled: true
      VersioningConfiguration:
        Status: Enabled
  
  CanaryArtifactsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CanaryArtifactsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowCanaryPutObjects
            Effect: Allow
            Principal:
              AWS: !GetAtt SyntheticsCanaryRole.Arn
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:ListBucket
            Resource:
              - !Sub 'arn:aws:s3:::${CanaryArtifactsBucket}'
              - !Sub 'arn:aws:s3:::${CanaryArtifactsBucket}/*'

  SyntheticsCanaryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchSyntheticsFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3BucketAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::${CanaryArtifactsBucket}'
                  - !Sub 'arn:aws:s3:::${CanaryArtifactsBucket}/*'
      

  SyntheticsCanary:
    Type: AWS::Synthetics::Canary
    Properties:
      Name: !Sub '${AWS::StackName}-load-test-canary'
      ArtifactS3Location: !Sub 's3://${CanaryArtifactsBucket}/${AWS::StackName}'
      ExecutionRoleArn: !GetAtt SyntheticsCanaryRole.Arn
      RuntimeVersion: 'syn-nodejs-puppeteer-9.1'
      Schedule:
        Expression: !Sub 'rate(${CanaryFrequency} minutes)'
      StartCanaryAfterCreation: true
      RunConfig:
        TimeoutInSeconds: 300
        EnvironmentVariables:
          API_ENDPOINT: !Ref ApiEndpoint
          REQUESTS_PER_RUN: !Ref RequestsPerRun
          PAYLOAD_SIZE_KB: '256'
      Code:
        Handler: index.handler
        Script: |
          const synthetics = require('Synthetics');
          const https = require('https');
          const log = require('SyntheticsLogger');

          const apiEndpoint = process.env.API_ENDPOINT;
          const requestsPerRun = parseInt(process.env.REQUESTS_PER_RUN, 10);
          const payloadSizeKB = parseInt(process.env.PAYLOAD_SIZE_KB, 10);

          // Generate large random data
          const generateLargePayload = (sizeInKB) => {
              const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
              const iterations = (sizeInKB * 1024) / characters.length;
              let result = '';
              
              for (let i = 0; i < iterations; i++) {
                  result += characters;
              }
              return result;
          };

          const makeRequest = async (method, data = null) => {
              const requestOptions = {
                  hostname: new URL(apiEndpoint).hostname,
                  port: 443,
                  path: new URL(apiEndpoint).pathname,
                  method: method,
                  headers: {
                      'Content-Type': 'application/json'
                  }
              };

              if (data) {
                  const postBody = JSON.stringify(data);
                  requestOptions.headers['Content-Length'] = Buffer.byteLength(postBody);
              }

              return new Promise((resolve, reject) => {
                  const req = https.request(requestOptions, (res) => {
                      let responseBody = '';
                      res.on('data', (chunk) => {
                          responseBody += chunk;
                      });

                      res.on('end', () => {
                          if (res.statusCode >= 200 && res.statusCode < 300) {
                              resolve({
                                  statusCode: res.statusCode,
                                  body: responseBody
                              });
                          } else {
                              reject(new Error(`HTTP Error: ${res.statusCode}`));
                          }
                      });
                  });

                  req.on('error', reject);

                  if (data) {
                      req.write(JSON.stringify(data));
                  }
                  req.end();
              });
          };

          const handler = async () => {
              const operations = [];
              
              for (let i = 0; i < requestsPerRun; i++) {
                  const userId = `user_${Date.now()}_${Math.random().toString(36).substring(7)}`;
                  const data = {
                      userId: userId,
                      timestamp: Date.now(),
                      payload: generateLargePayload(payloadSizeKB),
                      metadata: {
                          iteration: i,
                          random: Math.random(),
                          nested: {
                              field1: Math.random().toString(36),
                              field2: Math.random().toString(36),
                              field3: Array.from({length: 10}, () => Math.random())
                          }
                      }
                  };
                  
                  operations.push(
                      makeRequest('POST', data)
                          .then(result => ({type: 'write', success: true, result}))
                          .catch(error => ({type: 'write', success: false, error: error.message}))
                  );
              }

              try {
                  const results = await Promise.all(operations);
                  const summary = results.reduce((acc, result) => {
                      const key = `${result.type}${result.success ? 'Success' : 'Failed'}`;
                      acc[key] = (acc[key] || 0) + 1;
                      return acc;
                  }, {});

                  log.info('Load Test Summary:', summary);
                  
                  const failures = results.filter(r => !r.success);
                  if (failures.length > 0) {
                      throw new Error(`Load test had ${failures.length} failures`);
                  }
              } catch (error) {
                  log.error('Load test failed:', error);
                  throw error;
              }
          };

          exports.handler = async () => {
              return await handler();
          };



Outputs:
  CanaryName:
    Description: 'Name of the created CloudWatch Synthetics Canary'
    Value: !Ref SyntheticsCanary
